generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  password        String?
  country         String?
  timezone        String?
  name            String?
  roleId          String
  status          UserStatus  @default(INACTIVE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastSignInAt    DateTime?
  emailVerifiedAt DateTime?
  isTrashed       Boolean     @default(false)
  avatar          String?
  invitedByUserId String?
  isProtected     Boolean     @default(false)
  accounts        Account[]
  Event           Event[]
  Session         Session[]
  systemLog       SystemLog[]
  role            UserRole    @relation(fields: [roleId], references: [id])

  @@index([invitedByUserId])
  @@index([roleId])
  @@index([status])
}

model UserRole {
  id              String               @id @default(cuid())
  slug            String               @unique
  name            String               @unique
  description     String?
  isTrashed       Boolean              @default(false)
  createdByUserId String?
  createdAt       DateTime             @default(now())
  isProtected     Boolean              @default(false)
  isDefault       Boolean              @default(false)
  users           User[]
  permissions     UserRolePermission[]
}

model UserPermission {
  id              String               @id @default(cuid())
  slug            String               @unique
  name            String
  description     String?
  createdByUserId String?
  createdAt       DateTime             @default(now())
  roles           UserRolePermission[]
}

model UserRolePermission {
  id           String         @id @default(cuid())
  roleId       String
  permissionId String
  assignedAt   DateTime       @default(now())
  permission   UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         UserRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}

model SystemLog {
  id          String   @id @default(cuid())
  userId      String
  createdAt   DateTime @default(now())
  entityId    String?
  entityType  String?
  event       String?
  description String?
  ipAddress   String?
  meta        String?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemSetting {
  id                             String   @id @default(cuid())
  name                           String   @default("My Company")
  logo                           String?
  active                         Boolean  @default(true)
  address                        String?
  websiteURL                     String?
  supportEmail                   String?
  supportPhone                   String?
  language                       String   @default("en")
  timezone                       String   @default("UTC")
  currency                       String   @default("USD")
  currencyFormat                 String   @default("$ {value}")
  socialFacebook                 String?
  socialTwitter                  String?
  socialInstagram                String?
  socialLinkedIn                 String?
  socialPinterest                String?
  socialYoutube                  String?
  notifyStockEmail               Boolean  @default(true)
  notifyStockWeb                 Boolean  @default(true)
  notifyStockThreshold           Int      @default(10)
  notifyStockRoleIds             String[]
  notifyNewOrderEmail            Boolean  @default(true)
  notifyNewOrderWeb              Boolean  @default(true)
  notifyNewOrderRoleIds          String[]
  notifyOrderStatusUpdateEmail   Boolean  @default(true)
  notifyOrderStatusUpdateWeb     Boolean  @default(true)
  notifyOrderStatusUpdateRoleIds String[]
  notifyPaymentFailureEmail      Boolean  @default(true)
  notifyPaymentFailureWeb        Boolean  @default(true)
  notifyPaymentFailureRoleIds    String[]
  notifySystemErrorFailureEmail  Boolean  @default(true)
  notifySystemErrorWeb           Boolean  @default(true)
  notifySystemErrorRoleIds       String[]
}

model Template {
  id               String   @id @default(cuid())
  name             String
  category         String
  jsonContent      String?
  backgroundStyle  String?
  htmlContent      String?
  background       String?
  pageBackground   String?
  previewImageUrl  String?
  isPremium        Boolean  @default(false)
  price            Float    @default(0)
  isSystemTemplate Boolean  @default(false)
  createdByUserId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isTrashed        Boolean  @default(false)
  imagePath        String?
  badge            String?
  colors           String[]
  isFeatured       Boolean  @default(false)
  isNew            Boolean  @default(false)
  isTrending       Boolean  @default(false)
  keywords         String[]
  orientation      String   @default("portrait")
  popularity       Float    @default(0)
  templateThumbnailPath String? // S3 key for exported template thumbnail

  @@index([category])
  @@index([isPremium])
  @@index([createdByUserId])
  @@index([orientation])
  @@index([isTrending])
  @@index([isFeatured])
  @@index([isNew])
  @@index([popularity])
}

model TemplateCategory {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  description  String?
  icon         String?
  color        String?
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  thumbnailUrl String?

  @@index([isActive])
}

model Event {
  id                   String      @id @default(cuid())
  title                String
  description          String?
  date                 DateTime
  time                 String?
  location             String?
  templateId           String?
  jsonContent          String?
  imagePath            String?
  eventThumbnailPath   String? // S3 key for exported event thumbnail
  status               EventStatus @default(DRAFT)
  createdByUserId      String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  isTrashed            Boolean     @default(false)
  allowFamilyHeadcount Boolean     @default(false)
  allowMaybeRSVP       Boolean     @default(true)
  allowPlusOnes        Boolean     @default(false)
  limitEventCapacity   Boolean     @default(false)
  maxEventCapacity     Int         @default(0)
  maxPlusOnes          Int         @default(0)
  privateGuestList     Boolean     @default(false)
  User                 User        @relation(fields: [createdByUserId], references: [id])
  guests               Guest[]

  @@index([createdByUserId])
  @@index([templateId])
  @@index([status])
}

model Guest {
  id          String         @id @default(cuid())
  name        String
  email       String?
  phone       String?
  status      GuestStatus    @default(PENDING)
  eventId     String
  invitedAt   DateTime       @default(now())
  respondedAt DateTime?
  response    GuestResponse?
  adults      Int            @default(1)
  children    Int            @default(0)
  plusOnes    Int            @default(0)
  event       Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([status])
}

enum UserStatus {
  INACTIVE
  ACTIVE
  BLOCKED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum GuestResponse {
  YES
  NO
  MAYBE
}

enum GuestStatus {
  PENDING
  INVITED
  CONFIRMED
  DECLINED
  MAYBE
}
